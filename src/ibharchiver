#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2020 Markus Prasser
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

"""
IBHArchiver is a simple tool for creating personal archives of I'll Be Honest
"""

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk # pylint: disable=C0413
import sqlite3

DB_SCHEME_VERSION = 1

class MainWindow(Gtk.ApplicationWindow):
    """
    The main window (and class) (indirectly) containing all functionality
    """
    def __init__(self, win_title):
        super().__init__(title=win_title)

        self.db_conn = sqlite3.connect('/home/maprasser/test.db')
        self.db_cursor = self.db_conn.cursor()
        self.create_db_tables()

        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.add(main_box)

        # Filters
        filter_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        main_box.pack_start(filter_box, True, True, 0)

        # Items display
        display_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        tree_view = Gtk.TreeView()
        display_box.pack_start(tree_view, True, True, 0)
        main_box.pack_start(display_box, True, True, 0)

        # Buttons
        buttons_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        add_button = Gtk.Button.new_with_label('Add')
        buttons_box.pack_start(add_button, True, True, 0)
        play_button = Gtk.Button.new_with_label('Play')
        buttons_box.pack_start(play_button, True, True, 0)
        export_button = Gtk.Button.new_with_label('Export')
        buttons_box.pack_start(export_button, True, True, 0)
        main_box.pack_start(buttons_box, True, True, 0)

    def create_db_tables(self):
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Authors (aId INTEGER PRIMARY KEY ASC, aName TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS BibleBooks (bId INTEGER PRIMARY KEY ASC, bName TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Categories (cId INTEGER PRIMARY KEY ASC, cName TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Items (title TEXT NOT NULL, bytes BLOB NOT NULL, author INTEGER, category INTEGER, topic INTEGER, comments text, book INTEGER NOT NULL, chapters INTEGER NOT NULL, verses INTEGER NOT NULL, filename TEXT, FOREIGN KEY(author) REFERENCES Authors(aId), FOREIGN KEY (book) REFERENCES BibleBooks(bId), FOREIGN KEY(category) REFERENCES Categories(cId), FOREIGN KEY(topic) REFERENCES Topics(tId))')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Metadata (mdKey TEXT NOT NULL UNIQUE, mdValue TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Topics (tId INTEGER PRIMARY KEY ASC, tName TEXT NOT NULL UNIQUE)')

        if not self.db_cursor.execute('SELECT * FROM BibleBooks').fetchall():
            bible_books = ['Genesis', 'Exodus', 'Leviticus', 'Numbers', 'Deuteronomy', 'Joshua', 'Judges', 'Ruth', '1 Samuel', '2 Samuel', '1 Kings', '2 Kings', '1 Chronicles', '2 Chronicles', 'Ezra', 'Nehemiah', 'Esther', 'Job', 'Psalms', 'Proverbs', 'Ecclesiastes', 'Song of Solomon', 'Isaiah', 'Jeremiah', 'Lamentations', 'Ezekiel', 'Daniel', 'Hosea', 'Joel', 'Amos', 'Obadiah', 'Jonah', 'Micah', 'Nahum', 'Habakkuk', 'Zephaniah', 'Haggai', 'Zechariah', 'Malachi', 'Matthew', 'Mark', 'Luke', 'John', 'Acts', 'Romans', '1 Corinthians', '2 Corinthians', 'Galatians', 'Ephesians', 'Philippians', 'Colossians', '1 Thessalonians', '2 Thessalonians', '1 Timothy', '2 Timothy', 'Titus', 'Philemon', 'Hebrews', 'James', '1 Peter', '2 Peter', '1 John', '2 John', '3 John', 'Jude', 'Revelation']
            for bible_book in bible_books:
                self.db_cursor.execute('INSERT INTO BibleBooks (bName) VALUES (?)', (bible_book,))

        if not self.db_cursor.execute('SELECT * FROM Metadata').fetchall():
            self.db_cursor.execute('INSERT INTO Metadata VALUES (?, ?)', ('DB_SCHEME_VERSION', DB_SCHEME_VERSION))

        self.db_conn.commit()

def main():
    """
    This is the entry point of IBHArchiver
    """
    main_win = MainWindow('IBHArchiver')
    main_win.show_all()
    main_win.connect('destroy', Gtk.main_quit)
    Gtk.main()

if __name__ == '__main__':
    main()

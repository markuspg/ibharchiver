#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2020 Markus Prasser
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

"""
IBHArchiver is a simple tool for creating personal archives of I'll Be Honest
"""

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk # pylint: disable=C0413
import sqlite3

DB_SCHEME_VERSION = 1

class AddWindow(Gtk.Window):
    def __init__(self, db_cursor, win_title):
        super().__init__(title=win_title)
        self.props.modal = True

        self.db_cursor = db_cursor

        grid = Gtk.Grid()
        grid_row = 0
        self.add(grid)

        # Path to the resource
        self.path = None
        select_path_btn = Gtk.FileChooserButton.new('Path to the file to add', Gtk.FileChooserAction.OPEN)
        select_path_btn.connect('file-set', self.on_path_selected)
        grid.attach(select_path_btn, 0, grid_row, 4, 1)
        grid_row += 1

        # Resource type
        self.type = None
        resource_type_lbl = Gtk.Label(label='Type')
        grid.attach(resource_type_lbl, 0, grid_row, 1, 1)
        resource_type_cb = Gtk.ComboBoxText()
        for resource_type_row in self.db_cursor.execute('SELECT * FROM ResourceTypes;'):
            resource_type_cb.append_text(resource_type_row[1])
        resource_type_cb.connect('changed', self.on_type_changed)
        grid.attach(resource_type_cb, 1, grid_row, 3, 1)
        grid_row += 1

        # Title
        self.title = None
        title_lbl = Gtk.Label(label='Title')
        grid.attach(title_lbl, 0, grid_row, 1, 1)
        title_entry = Gtk.Entry()
        title_entry.connect('changed', self.on_title_changed)
        grid.attach(title_entry, 1, grid_row, 3, 1)
        grid_row += 1

        # Author
        self.authors = [author_row[1] for author_row in self.db_cursor.execute('SELECT * FROM Authors;')]
        self.author = None
        author_lbl = Gtk.Label(label='Author')
        grid.attach(author_lbl, 0, grid_row, 1, 1)
        author_cb = Gtk.ComboBoxText(has_entry=True)
        for author in self.authors:
            author_cb.append_text(author)
        author_cb.connect('changed', self.on_author_changed)
        grid.attach(author_cb, 1, grid_row, 3, 1)
        grid_row += 1

        # Category
        self.category = None
        category_lbl = Gtk.Label(label='Category')
        grid.attach(category_lbl, 0, grid_row, 1, 1)
        category_cb = Gtk.ComboBoxText(has_entry=True)
        for category_row in self.db_cursor.execute('SELECT * FROM Categories;'):
            category_cb.append_text(category_row[1])
        category_cb.connect('changed', self.on_category_changed)
        grid.attach(category_cb, 1, grid_row, 3, 1)
        grid_row += 1

        # Topic
        self.topic = None
        topic_lbl = Gtk.Label(label='Topic')
        grid.attach(topic_lbl, 0, grid_row, 1, 1)
        topic_cb = Gtk.ComboBoxText(has_entry=True)
        for topic_row in self.db_cursor.execute('SELECT * FROM Topics;'):
            topic_cb.append_text(topic_row[1])
        topic_cb.connect('changed', self.on_topic_changed)
        grid.attach(topic_cb, 1, grid_row, 3, 1)
        grid_row += 1


        # Bible book, chapters and verses
        self.book = None
        self.chapters = None
        self.verses = None
        scripture_lbl = Gtk.Label(label='Scripture')
        grid.attach(scripture_lbl, 0, grid_row, 1, 1)
        bible_book_cb = Gtk.ComboBoxText()
        for bible_book_row in self.db_cursor.execute('SELECT * FROM BibleBooks;'):
            bible_book_cb.append_text(bible_book_row[1])
        bible_book_cb.set_active(0)
        self.book = bible_book_cb.get_active_text()
        bible_book_cb.connect('changed', self.on_book_changed)
        grid.attach(bible_book_cb, 1, grid_row, 1, 1)
        chapters_entry = Gtk.Entry()
        chapters_entry.connect('changed', self.on_chapters_changed)
        grid.attach(chapters_entry, 2, grid_row, 1, 1)
        verses_entry = Gtk.Entry()
        verses_entry.connect('changed', self.on_verses_changed)
        grid.attach(verses_entry, 3, grid_row, 1, 1)
        grid_row += 1

        # "Add" button
        self.add_btn = Gtk.Button.new_with_label('Add')
        self.add_btn.props.sensitive = False
        self.add_btn.connect('clicked', self.on_add_button_clicked)
        grid.attach(self.add_btn, 0, grid_row, 4, 1)

    def on_add_button_clicked(self, widget):
        if self.author not in self.authors:
            self.db_cursor.execute('INSERT INTO Authors (aName) VALUES (?);', (self.author,))

    def on_author_changed(self, widget):
        self.author = widget.get_active_text()
        self.verify_attributes()

    def on_book_changed(self, widget):
        self.book = widget.get_active_text()
        self.verify_attributes()

    def on_category_changed(self, widget):
        self.category = widget.get_active_text()
        self.verify_attributes()

    def on_chapters_changed(self, widget):
        self.chapters = widget.get_text()
        self.verify_attributes()

    def on_path_selected(self, widget):
        self.path = widget.get_filenames()
        assert len(self.path) == 1
        self.path = self.path[0]
        self.verify_attributes()

    def on_title_changed(self, widget):
        self.title = widget.get_text()
        self.verify_attributes()

    def on_topic_changed(self, widget):
        self.topic = widget.get_active_text()
        self.verify_attributes()

    def on_type_changed(self, widget):
        self.type = widget.get_active_text()
        self.verify_attributes()

    def on_verses_changed(self, widget):
        self.verses = widget.get_text()
        self.verify_attributes()

    def verify_attributes(self):
        # "topic" is exempted from verification, since it can be empty
        if self.author \
                and self.book \
                and self.chapters \
                and self.category \
                and self.path \
                and self.title \
                and self.type \
                and self.verses:
            self.add_btn.props.sensitive = True
        else:
            self.add_btn.props.sensitive = False

class MainWindow(Gtk.ApplicationWindow):
    """
    The main window (and class) (indirectly) containing all functionality
    """
    def __init__(self, win_title):
        super().__init__(title=win_title)

        self.db_conn = sqlite3.connect('/home/maprasser/test.db')
        self.db_cursor = self.db_conn.cursor()
        self.create_db_tables()

        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.add(main_box)

        # Filters
        filter_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        main_box.pack_start(filter_box, True, True, 0)

        # Items display
        display_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        tree_view = Gtk.TreeView()
        display_box.pack_start(tree_view, True, True, 0)
        main_box.pack_start(display_box, True, True, 0)

        # Buttons
        buttons_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        add_button = Gtk.Button.new_with_label('Add')
        add_button.connect('clicked', self.on_add_button_clicked)
        buttons_box.pack_start(add_button, True, True, 0)
        play_button = Gtk.Button.new_with_label('Play')
        play_button.connect('clicked', self.on_play_button_clicked)
        buttons_box.pack_start(add_button, True, True, 0)
        buttons_box.pack_start(play_button, True, True, 0)
        export_button = Gtk.Button.new_with_label('Export')
        export_button.connect('clicked', self.on_export_button_clicked)
        buttons_box.pack_start(add_button, True, True, 0)
        buttons_box.pack_start(export_button, True, True, 0)
        main_box.pack_start(buttons_box, True, True, 0)

    def create_db_tables(self):
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Authors (aId INTEGER PRIMARY KEY ASC, aName TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS BibleBooks (bId INTEGER PRIMARY KEY ASC, bName TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Categories (cId INTEGER PRIMARY KEY ASC, cName TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Items (title TEXT NOT NULL, bytes BLOB NOT NULL, author INTEGER, category INTEGER, topic INTEGER, comments text, book INTEGER NOT NULL, chapters INTEGER NOT NULL, verses INTEGER NOT NULL, filename TEXT, FOREIGN KEY(author) REFERENCES Authors(aId), FOREIGN KEY (book) REFERENCES BibleBooks(bId), FOREIGN KEY(category) REFERENCES Categories(cId), FOREIGN KEY(topic) REFERENCES Topics(tId))')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Metadata (mdKey TEXT NOT NULL UNIQUE, mdValue TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS ResourceTypes (rId INTEGER PRIMARY KEY ASC, rName TEXT NOT NULL UNIQUE)')
        self.db_cursor.execute('CREATE TABLE IF NOT EXISTS Topics (tId INTEGER PRIMARY KEY ASC, tName TEXT NOT NULL UNIQUE)')

        if not self.db_cursor.execute('SELECT * FROM BibleBooks').fetchall():
            bible_books = ['Genesis', 'Exodus', 'Leviticus', 'Numbers', 'Deuteronomy', 'Joshua', 'Judges', 'Ruth', '1 Samuel', '2 Samuel', '1 Kings', '2 Kings', '1 Chronicles', '2 Chronicles', 'Ezra', 'Nehemiah', 'Esther', 'Job', 'Psalms', 'Proverbs', 'Ecclesiastes', 'Song of Solomon', 'Isaiah', 'Jeremiah', 'Lamentations', 'Ezekiel', 'Daniel', 'Hosea', 'Joel', 'Amos', 'Obadiah', 'Jonah', 'Micah', 'Nahum', 'Habakkuk', 'Zephaniah', 'Haggai', 'Zechariah', 'Malachi', 'Matthew', 'Mark', 'Luke', 'John', 'Acts', 'Romans', '1 Corinthians', '2 Corinthians', 'Galatians', 'Ephesians', 'Philippians', 'Colossians', '1 Thessalonians', '2 Thessalonians', '1 Timothy', '2 Timothy', 'Titus', 'Philemon', 'Hebrews', 'James', '1 Peter', '2 Peter', '1 John', '2 John', '3 John', 'Jude', 'Revelation']
            for bible_book in bible_books:
                self.db_cursor.execute('INSERT INTO BibleBooks (bName) VALUES (?)', (bible_book,))

        if not self.db_cursor.execute('SELECT * FROM Metadata').fetchall():
            self.db_cursor.execute('INSERT INTO Metadata VALUES (?, ?)', ('DB_SCHEME_VERSION', DB_SCHEME_VERSION))

        if not self.db_cursor.execute('SELECT * FROM ResourceTypes').fetchall():
            for resource_type in ('HTML', 'MP3', 'PDF'):
                self.db_cursor.execute('INSERT INTO ResourceTypes (rName) VALUES (?)', (resource_type,))

        self.db_conn.commit()

    def on_add_button_clicked(self, widget):
        win = AddWindow(self.db_cursor, self.props.title)
        win.connect('delete-event', self.on_add_window_closed)
        win.show_all()

    def on_add_window_closed(self, widget, event):
        self.db_conn.commit()
        return False

    def on_export_button_clicked(self, widget):
        pass

    def on_play_button_clicked(self, widget):
        pass

def main():
    """
    This is the entry point of IBHArchiver
    """
    main_win = MainWindow('IBHArchiver')
    main_win.show_all()
    main_win.connect('destroy', Gtk.main_quit)
    Gtk.main()

if __name__ == '__main__':
    main()

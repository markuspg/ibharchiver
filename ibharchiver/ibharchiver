#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2020 Markus Prasser
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE

"""
IBHArchiver is a simple tool for creating personal archives of I'll Be Honest
"""

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import GObject # pylint: disable=C0413
from gi.repository import Gtk # pylint: disable=C0413
import os

from database.ibhdatabase import IBHDatabase

class AddWindow(Gtk.Window):
    def __init__(self, db, db_cursor, win_title, authors_model):
        super().__init__(title=win_title)
        self.props.modal = True

        self.authors_model = authors_model
        self.db = db
        self.db_cursor = db_cursor

        grid = Gtk.Grid()
        grid_row = 0
        self.add(grid)

        # Path to the resource
        self.path = None
        select_path_btn = Gtk.FileChooserButton.new('Path to the file to add', Gtk.FileChooserAction.OPEN)
        select_path_btn.connect('file-set', self.on_path_selected)
        grid.attach(select_path_btn, 0, grid_row, 4, 1)
        grid_row += 1

        # Resource type
        self.type = None
        resource_type_lbl = Gtk.Label(label='Type')
        grid.attach(resource_type_lbl, 0, grid_row, 1, 1)
        resource_type_cb = Gtk.ComboBoxText()
        for resource_type in self.db.resource_types_table.get_resource_types():
            resource_type_cb.append_text(resource_type)
        resource_type_cb.connect('changed', self.on_type_changed)
        grid.attach(resource_type_cb, 1, grid_row, 3, 1)
        grid_row += 1

        # Title
        self.title = None
        title_lbl = Gtk.Label(label='Title')
        grid.attach(title_lbl, 0, grid_row, 1, 1)
        title_entry = Gtk.Entry()
        title_entry.connect('changed', self.on_title_changed)
        grid.attach(title_entry, 1, grid_row, 3, 1)
        grid_row += 1

        # Author
        self.author = None
        author_lbl = Gtk.Label(label='Author')
        grid.attach(author_lbl, 0, grid_row, 1, 1)
        author_cb = Gtk.ComboBox.new_with_model_and_entry(self.authors_model)
        author_cb.connect('changed', self.on_author_changed)
        author_cb.set_entry_text_column(0)
        grid.attach(author_cb, 1, grid_row, 3, 1)
        grid_row += 1

        # Category
        self.category = None
        category_lbl = Gtk.Label(label='Category')
        grid.attach(category_lbl, 0, grid_row, 1, 1)
        category_cb = Gtk.ComboBoxText(has_entry=True)
        for category in self.db.categories_table.get_categories():
            category_cb.append_text(category)
        category_cb.connect('changed', self.on_category_changed)
        grid.attach(category_cb, 1, grid_row, 3, 1)
        grid_row += 1

        # Topic
        self.topic = None
        topic_lbl = Gtk.Label(label='Topic')
        grid.attach(topic_lbl, 0, grid_row, 1, 1)
        topic_cb = Gtk.ComboBoxText(has_entry=True)
        for topic in self.db.topics_table.get_topics():
            topic_cb.append_text(topic)
        topic_cb.connect('changed', self.on_topic_changed)
        grid.attach(topic_cb, 1, grid_row, 3, 1)
        grid_row += 1


        # Bible book, chapters and verses
        self.book = None
        self.chapters = None
        self.verses = None
        scripture_lbl = Gtk.Label(label='Scripture')
        grid.attach(scripture_lbl, 0, grid_row, 1, 1)
        bible_book_cb = Gtk.ComboBoxText()
        for bible_book in self.db.bible_books_table.get_bible_books():
            bible_book_cb.append_text(bible_book)
        self.book = bible_book_cb.get_active_text()
        bible_book_cb.connect('changed', self.on_book_changed)
        grid.attach(bible_book_cb, 1, grid_row, 1, 1)
        chapters_entry = Gtk.Entry()
        chapters_entry.connect('changed', self.on_chapters_changed)
        grid.attach(chapters_entry, 2, grid_row, 1, 1)
        verses_entry = Gtk.Entry()
        verses_entry.connect('changed', self.on_verses_changed)
        grid.attach(verses_entry, 3, grid_row, 1, 1)
        grid_row += 1

        # "Add" button
        self.add_btn = Gtk.Button.new_with_label('Add')
        self.add_btn.props.sensitive = False
        self.add_btn.connect('clicked', self.on_add_button_clicked)
        grid.attach(self.add_btn, 0, grid_row, 4, 1)

    def on_add_button_clicked(self, widget):
        with open(self.path, 'rb') as bin_file:
            byte_arr = bin_file.read()
        self.db.authors_table.add_author(self.author)
        aId = self.db.authors_table.get_author_id(self.author)
        bId = None
        if self.book:
            bId = self.db.bible_book_table.get_bible_book_id(self.book)
        self.db.categories_table.add_category(self.category)
        cId = [self.db.categories_table.get_category_id(self.category)]
        chapters = None
        if self.chapters:
            chapters = int(self.chapters)
        rId = self.db.resource_types_table.get_resource_type_id(self.type)
        tId = None
        if self.topic:
            self.db.topics_table.add_topic(self.topic)
            tId = [self.db.topics_table.get_topic_id(self.topic)]
        verses = None
        if self.verses:
            verses = int(self.verses)
        self.db.items_table.add_resource(rId, self.title, byte_arr, aId, cId, tId, bId, chapters, verses, os.path.basename(self.path))
        self.close()

    def on_author_changed(self, widget):
        active_iter = widget.get_active_iter()
        if active_iter:
            self.author = self.authors_model[active_iter][0]
        else:
            self.author = widget.get_child().get_text()
        self.verify_attributes()

    def on_book_changed(self, widget):
        self.book = widget.get_active_text()
        self.verify_attributes()

    def on_category_changed(self, widget):
        self.category = widget.get_active_text()
        self.verify_attributes()

    def on_chapters_changed(self, widget):
        self.chapters = widget.get_text()
        self.verify_attributes()

    def on_path_selected(self, widget):
        self.path = widget.get_filenames()
        assert len(self.path) == 1
        self.path = self.path[0]
        self.verify_attributes()

    def on_title_changed(self, widget):
        self.title = widget.get_text()
        self.verify_attributes()

    def on_topic_changed(self, widget):
        self.topic = widget.get_active_text()
        self.verify_attributes()

    def on_type_changed(self, widget):
        self.type = widget.get_active_text()
        self.verify_attributes()

    def on_verses_changed(self, widget):
        self.verses = widget.get_text()
        self.verify_attributes()

    def verify_attributes(self):
        # "book", "chapters", "topic" and "verses" are exempted from
        # verification, since they can be empty
        if self.author \
                and self.category \
                and self.path \
                and self.title \
                and self.type:
            self.add_btn.props.sensitive = True
        else:
            self.add_btn.props.sensitive = False

class DBAdaptor:
    def __init__(self, db, db_cursor, model):
        self.db = db
        self.db_cursor = db_cursor
        self.model = model

        for re in self.db.items_table.get_items_info():
            self.model.append([re[0], re[1], re[2], re[3], re[4]])

class MainWindow(Gtk.ApplicationWindow):
    """
    The main window (and class) (indirectly) containing all functionality
    """
    def __init__(self, win_title):
        super().__init__(title=win_title)

        self.authors_model = Gtk.ListStore(str)

        self.db = IBHDatabase(self.authors_model)
        self.db_conn = self.db.db_conn
        self.db_cursor = self.db.db_cursor

        self.model = Gtk.ListStore(str, str, str, str, str)
        self.db_adaptor = DBAdaptor(self.db, self.db_cursor, self.model)

        main_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=0)
        self.add(main_box)

        # Filters
        filter_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        main_box.pack_start(filter_box, True, True, 0)

        # Items display
        display_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        self.tree_view = Gtk.TreeView.new_with_model(self.model)
        display_box.pack_start(self.tree_view, True, True, 0)
        type_column = Gtk.TreeViewColumn('Type', Gtk.CellRendererText(), text=0)
        self.tree_view.append_column(type_column)
        title_column = Gtk.TreeViewColumn('Title', Gtk.CellRendererText(), text=1)
        self.tree_view.append_column(title_column)
        author_column = Gtk.TreeViewColumn('Author', Gtk.CellRendererText(), text=2)
        self.tree_view.append_column(author_column)
        category_column = Gtk.TreeViewColumn('Category', Gtk.CellRendererText(), text=3)
        self.tree_view.append_column(category_column)
        topic_column = Gtk.TreeViewColumn('Topic', Gtk.CellRendererText(), text=4)
        self.tree_view.append_column(topic_column)
        main_box.pack_start(display_box, True, True, 0)

        # Buttons
        buttons_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=0)
        add_button = Gtk.Button.new_with_label('Add')
        add_button.connect('clicked', self.on_add_button_clicked)
        buttons_box.pack_start(add_button, True, True, 0)
        play_button = Gtk.Button.new_with_label('Play')
        play_button.connect('clicked', self.on_play_button_clicked)
        buttons_box.pack_start(add_button, True, True, 0)
        buttons_box.pack_start(play_button, True, True, 0)
        export_button = Gtk.Button.new_with_label('Export')
        export_button.connect('clicked', self.on_export_button_clicked)
        buttons_box.pack_start(add_button, True, True, 0)
        buttons_box.pack_start(export_button, True, True, 0)
        main_box.pack_start(buttons_box, True, True, 0)

    def on_add_button_clicked(self, widget):
        win = AddWindow(self.db, self.db_cursor, self.props.title, self.authors_model)
        win.connect('delete-event', self.on_add_window_closed)
        win.show_all()

    def on_add_window_closed(self, widget, event):
        self.db_conn.commit()
        return False

    def on_export_button_clicked(self, widget):
        selection = self.tree_view.get_selection()
        model, tree_iter = selection.get_selected()
        if tree_iter is not None:
            item_bytes, item_filename, item_size = self.db.items_table.get_resource(
                    model[tree_iter][0], model[tree_iter][1])
            with open(item_filename, 'wb') as out_file:
                assert out_file.write(item_bytes) == item_size

    def on_play_button_clicked(self, widget):
        pass

def main():
    """
    This is the entry point of IBHArchiver
    """
    main_win = MainWindow('IBHArchiver')
    main_win.show_all()
    main_win.connect('destroy', Gtk.main_quit)
    Gtk.main()

if __name__ == '__main__':
    main()
